{"version":3,"sources":["App.js","index.js"],"names":["App","wpmList","useState","currentWord","setCurrentWord","words","setWords","speed","setSpeed","count","setCount","callback","delay","savedCallback","useRef","intervalId","currentDelay","setDelay","toggleRunning","useCallback","clear","clearInterval","current","useEffect","setInterval","useInterval","wordArray","split","length","toggle","running","RenderSpeedButtons","buttonClassName","map","wpm","index","className","concat","disabled","id","onClick","rows","cols","placeholder","onChange","e","target","value","ReactDOM","render","document","getElementById"],"mappings":"0KAqCA,IAuEeA,EAvEH,WACR,IAAMC,EAAU,CAAC,GAAI,IAAK,IAAK,IAAK,IAAK,IAAK,KADhC,EAIwBC,mBAAS,IAJjC,mBAIPC,EAJO,KAIMC,EAJN,OAKYF,mBAAS,IALrB,mBAKPG,EALO,KAKAC,EALA,OAMYJ,mBAAS,IANrB,mBAMPK,EANO,KAMAC,EANA,OAOYN,mBAAS,GAPrB,mBAOPO,EAPO,KAOAC,EAPA,OAlClB,SAAqBC,EAAUC,GAC3B,IAAMC,EAAgBC,mBAChBC,EAAaD,iBAAO,MAFQ,EAGDZ,mBAASU,GAHR,mBAG3BI,EAH2B,KAGbC,EAHa,KAK5BC,EAAgBC,uBAAY,kBAAMF,GAAS,SAACD,GAAD,OAAoC,OAAjBA,EAAwBJ,EAAQ,UAAQ,CACxGA,IAGEQ,EAAQD,uBAAY,kBAAME,cAAcN,EAAWO,WAAU,IAsBnE,OAnBAC,qBAAU,WACNV,EAAcS,QAAUX,IACzB,CAACA,IAGJY,qBAAU,WAWN,OANIR,EAAWO,SAASF,IAEH,OAAjBJ,IACAD,EAAWO,QAAUE,aAPzB,WACIX,EAAcS,YAMyBN,IAGpCI,IACR,CAACJ,EAAcI,IAEX,CAACF,IAAiBF,GAYCS,EAAY,WAClC,GAAKpB,EAAL,CAGA,IAAMqB,EAAYrB,EAAMsB,MAAM,KAE9BjB,GAAS,SAACD,GAAD,OAAWA,EAAQiB,EAAUE,QAAUnB,EAAQ,KAExDL,EAAesB,EAAUjB,OAfK,KAgBdF,EAhB4B,KAFlC,mBASPsB,EATO,KASCC,EATD,KAoBRC,EAAqB,WACvB,IAAMC,EAAkB,iBACxB,OAAO/B,EAAQgC,KAAI,SAACC,EAAKC,GAAN,OACf,wBACIC,UAAWF,IAAQ3B,EAAQyB,EAAgBK,OAAO,gBAAkBL,EACpEM,SAAUR,EACVS,GAAIL,EAEJM,QAAS,WACLhC,EAAS0B,IANjB,SASKA,GALIC,OAUjB,OACI,sBAAKC,UAAU,MAAf,UACI,qBAAKA,UAAU,SAAf,SACI,oBAAIA,UAAU,mDAAd,4BAEJ,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,eAAd,SAA8BjC,IAE9B,0BACIiC,UAAU,2CACVK,KAAK,KACLC,KAAK,MACLC,YAAY,oBACZC,SAAU,SAACC,GACPvC,EAASuC,EAAEC,OAAOC,UAI1B,sBAAKX,UAAU,UAAf,UACI,cAACL,EAAD,IAEA,wBAAQK,UAAU,iBAAiBI,QAASX,EAA5C,SACI,sBAAMO,UAAU,gBAAhB,SACMN,EAA0C,mBAAGM,UAAU,iBAA7C,mBAAGA,UAAU,uBAKrC,uCAAQ7B,EAAR,8B,MChGhByC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,U","file":"static/js/main.23cbc158.chunk.js","sourcesContent":["import React, { useEffect, useState, Fragment, useRef, useCallback } from \"react\";\nimport \"./App.css\";\n\nfunction useInterval(callback, delay) {\n    const savedCallback = useRef();\n    const intervalId = useRef(null);\n    const [currentDelay, setDelay] = useState(delay);\n\n    const toggleRunning = useCallback(() => setDelay((currentDelay) => (currentDelay === null ? delay : null)), [\n        delay,\n    ]);\n\n    const clear = useCallback(() => clearInterval(intervalId.current), []);\n\n    // Remember the latest function.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n\n        if (intervalId.current) clear();\n\n        if (currentDelay !== null) {\n            intervalId.current = setInterval(tick, currentDelay);\n        }\n\n        return clear;\n    }, [currentDelay, clear]);\n\n    return [toggleRunning, !!currentDelay];\n}\n\nconst App = () => {\n    const wpmList = [60, 120, 240, 360, 480, 540, 720];\n    const wpmToMillisecond = (wpm) => 1000 / (wpm / 60);\n\n    const [currentWord, setCurrentWord] = useState(\"\");\n    const [words, setWords] = useState(\"\");\n    const [speed, setSpeed] = useState(60);\n    const [count, setCount] = useState(0);\n\n    const [toggle, running] = useInterval(() => {\n        if (!words) {\n            return;\n        }\n        const wordArray = words.split(\" \");\n\n        setCount((count) => count < wordArray.length && count + 1);\n\n        setCurrentWord(wordArray[count]);\n    }, wpmToMillisecond(speed));\n\n    const RenderSpeedButtons = () => {\n        const buttonClassName = \"button is-link\";\n        return wpmList.map((wpm, index) => (\n            <button\n                className={wpm === speed ? buttonClassName.concat(\" is-inverted\") : buttonClassName}\n                disabled={running}\n                id={wpm}\n                key={index}\n                onClick={() => {\n                    setSpeed(wpm);\n                }}\n            >\n                {wpm}\n            </button>\n        ));\n    };\n\n    return (\n        <div className=\"App\">\n            <div className=\"header\">\n                <h1 className=\"is-size-1 has-text-weight-semibold has-text-left\">Speed Reader</h1>\n            </div>\n            <div className=\"container\">\n                <h1 className=\"current-word\">{currentWord}</h1>\n\n                <textarea\n                    className=\"textarea is-large is-info has-fixed-size\"\n                    rows=\"10\"\n                    cols=\"100\"\n                    placeholder=\"Add text to start\"\n                    onChange={(e) => {\n                        setWords(e.target.value);\n                    }}\n                />\n\n                <div className=\"buttons\">\n                    <RenderSpeedButtons />\n\n                    <button className=\"button is-link\" onClick={toggle}>\n                        <span className=\"icon is-small\">\n                            {!running ? <i className=\"fas fa-play\" /> : <i className=\"fas fa-pause\" />}\n                        </span>\n                    </button>\n                </div>\n\n                <h1>{`${speed} words per second`}</h1>\n            </div>\n        </div>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}